package com.mashape.p.spoonacularrecipefoodnutritionv1.controllers;/*
 * SpoonacularAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;

import com.mashape.p.spoonacularrecipefoodnutritionv1.*;
import com.mashape.p.spoonacularrecipefoodnutritionv1.models.*;
import com.mashape.p.spoonacularrecipefoodnutritionv1.exceptions.*;
import HttpClient;
import HttpContext;
import HttpRequest;
import HttpResponse;
import HttpStringResponse;
import APICallBack;
import APICallBackCatcher;

public class APIController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static APIController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the APIController class 
     */
    public static APIController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new APIController();
            }
        }
        return instance;
    }

    /**
     * Get information about a packaged food product.
     * @param    id    Required parameter: The id of the packaged food product.
     * @return    Returns the DynamicResponse response from the API call 
     */
    public DynamicResponse getProductInformation(
                final int id
    ) throws Throwable {
        APICallBackCatcher<DynamicResponse> callback = new APICallBackCatcher<DynamicResponse>();
        getProductInformationAsync(id, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get information about a packaged food product.
     * @param    id    Required parameter: The id of the packaged food product.
     * @return    Returns the void response from the API call 
     */
    public void getProductInformationAsync(
                final int id,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/food/products/{id}");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4771634518707666670L;
            {
                    put( "id", id );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5378215620707174795L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "X-Mashape-Key", Configuration.xMashapeKey );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Find recipes which are similar to the given one.
     * @param    id    Required parameter: The id of the source recipe to which similar recipes should be found.
     * @return    Returns the DynamicResponse response from the API call 
     */
    public DynamicResponse findSimilarRecipes(
                final int id
    ) throws Throwable {
        APICallBackCatcher<DynamicResponse> callback = new APICallBackCatcher<DynamicResponse>();
        findSimilarRecipesAsync(id, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Find recipes which are similar to the given one.
     * @param    id    Required parameter: The id of the source recipe to which similar recipes should be found.
     * @return    Returns the void response from the API call 
     */
    public void findSimilarRecipesAsync(
                final int id,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/recipes/{id}/similar");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5256892976583697105L;
            {
                    put( "id", id );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4723419078517521828L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "X-Mashape-Key", Configuration.xMashapeKey );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Autocomplete a search for an ingredient.
     * @param    query    Required parameter: The query - a partial or full ingredient name.
     * @return    Returns the DynamicResponse response from the API call 
     */
    public DynamicResponse getAutocompleteIngredientSearch(
                final String query
    ) throws Throwable {
        APICallBackCatcher<DynamicResponse> callback = new APICallBackCatcher<DynamicResponse>();
        getAutocompleteIngredientSearchAsync(query, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Autocomplete a search for an ingredient.
     * @param    query    Required parameter: The query - a partial or full ingredient name.
     * @return    Returns the void response from the API call 
     */
    public void getAutocompleteIngredientSearchAsync(
                final String query,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/food/ingredients/autocomplete");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5745441903174729632L;
            {
                    put( "query", query );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4965503371996038703L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "X-Mashape-Key", Configuration.xMashapeKey );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Visualize the price breakdown of a recipe.
     * @param    ingredientList    Required parameter: The ingredient list of the recipe, one ingredient per line.
     * @param    servings    Required parameter: The number of servings.
     * @param    defaultCss    Optional parameter: Whether the widget should be styled with the default css.
     * @param    mode    Optional parameter: The mode in which the widget should be delivered. 1 = separate views (compact), 2 = all in one view (full).
     * @param    fieldParameters    Additional optional form parameters are supported by this endpoint
     * @return    Returns the DynamicResponse response from the API call 
     */
    public DynamicResponse createVisualizePriceBreakdown(
                final String ingredientList,
                final int servings,
                final String defaultCss,
                final Integer mode,
                Map<String, Object> fieldParameters
    ) throws Throwable {
        APICallBackCatcher<DynamicResponse> callback = new APICallBackCatcher<DynamicResponse>();
        createVisualizePriceBreakdownAsync(ingredientList, servings, defaultCss, mode, fieldParameters, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Visualize the price breakdown of a recipe.
     * @param    ingredientList    Required parameter: The ingredient list of the recipe, one ingredient per line.
     * @param    servings    Required parameter: The number of servings.
     * @param    defaultCss    Optional parameter: Whether the widget should be styled with the default css.
     * @param    mode    Optional parameter: The mode in which the widget should be delivered. 1 = separate views (compact), 2 = all in one view (full).
     * @param    fieldParameters    Additional optional form parameters are supported by this endpoint
     * @return    Returns the void response from the API call 
     */
    public void createVisualizePriceBreakdownAsync(
                final String ingredientList,
                final int servings,
                final String defaultCss,
                final Integer mode,
                Map<String, Object> fieldParameters,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/recipes/visualizePriceEstimator");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4839887108996295648L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "X-Mashape-Key", Configuration.xMashapeKey );
            }
        };

        //load all fields for the outgoing API request
        Map<String, Object> _parameters = new HashMap<String, Object>() {
            private static final long serialVersionUID = 4870050439683330417L;
            {
                    put( "ingredientList", ingredientList );
                    put( "servings", servings );
                    put( "defaultCss", (null != defaultCss) ? defaultCss : "checked" );
                    put( "mode", (null != mode) ? mode : 1 );
            }
        };
        _parameters.putAll( fieldParameters );

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Visualize a recipe's nutritional information.
     * @param    ingredientList    Required parameter: The ingredient list of the recipe, one ingredient per line.
     * @param    servings    Required parameter: The number of servings.
     * @param    defaultCss    Optional parameter: Whether the ingredient list should be styled with the default css.
     * @param    fieldParameters    Additional optional form parameters are supported by this endpoint
     * @return    Returns the DynamicResponse response from the API call 
     */
    public DynamicResponse createVisualizeNutrition(
                final String ingredientList,
                final int servings,
                final String defaultCss,
                Map<String, Object> fieldParameters
    ) throws Throwable {
        APICallBackCatcher<DynamicResponse> callback = new APICallBackCatcher<DynamicResponse>();
        createVisualizeNutritionAsync(ingredientList, servings, defaultCss, fieldParameters, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Visualize a recipe's nutritional information.
     * @param    ingredientList    Required parameter: The ingredient list of the recipe, one ingredient per line.
     * @param    servings    Required parameter: The number of servings.
     * @param    defaultCss    Optional parameter: Whether the ingredient list should be styled with the default css.
     * @param    fieldParameters    Additional optional form parameters are supported by this endpoint
     * @return    Returns the void response from the API call 
     */
    public void createVisualizeNutritionAsync(
                final String ingredientList,
                final int servings,
                final String defaultCss,
                Map<String, Object> fieldParameters,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/recipes/visualizeNutrition");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5067552253638813755L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "X-Mashape-Key", Configuration.xMashapeKey );
            }
        };

        //load all fields for the outgoing API request
        Map<String, Object> _parameters = new HashMap<String, Object>() {
            private static final long serialVersionUID = 5026028428529103144L;
            {
                    put( "ingredientList", ingredientList );
                    put( "servings", servings );
                    put( "defaultCss", (null != defaultCss) ? defaultCss : "checked" );
            }
        };
        _parameters.putAll( fieldParameters );

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Visualize ingredients of a recipe.
     * @param    ingredientList    Required parameter: The ingredient list of the recipe, one ingredient per line.
     * @param    servings    Required parameter: The initial number of servings.
     * @param    defaultCss    Optional parameter: Whether the ingredient list should be styled with the default css.
     * @param    measure    Optional parameter: The initial measure, either "metric" or "us".
     * @param    view    Optional parameter: The initial view, either "grid" or "list".
     * @param    fieldParameters    Additional optional form parameters are supported by this endpoint
     * @return    Returns the DynamicResponse response from the API call 
     */
    public DynamicResponse createVisualizeIngredients(
                final String ingredientList,
                final int servings,
                final String defaultCss,
                final String measure,
                final String view,
                Map<String, Object> fieldParameters
    ) throws Throwable {
        APICallBackCatcher<DynamicResponse> callback = new APICallBackCatcher<DynamicResponse>();
        createVisualizeIngredientsAsync(ingredientList, servings, defaultCss, measure, view, fieldParameters, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Visualize ingredients of a recipe.
     * @param    ingredientList    Required parameter: The ingredient list of the recipe, one ingredient per line.
     * @param    servings    Required parameter: The initial number of servings.
     * @param    defaultCss    Optional parameter: Whether the ingredient list should be styled with the default css.
     * @param    measure    Optional parameter: The initial measure, either "metric" or "us".
     * @param    view    Optional parameter: The initial view, either "grid" or "list".
     * @param    fieldParameters    Additional optional form parameters are supported by this endpoint
     * @return    Returns the void response from the API call 
     */
    public void createVisualizeIngredientsAsync(
                final String ingredientList,
                final int servings,
                final String defaultCss,
                final String measure,
                final String view,
                Map<String, Object> fieldParameters,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/recipes/visualizeIngredients");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4863992883124964914L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "X-Mashape-Key", Configuration.xMashapeKey );
            }
        };

        //load all fields for the outgoing API request
        Map<String, Object> _parameters = new HashMap<String, Object>() {
            private static final long serialVersionUID = 5350714848741653392L;
            {
                    put( "ingredientList", ingredientList );
                    put( "servings", servings );
                    put( "defaultCss", (null != defaultCss) ? defaultCss : "checked" );
                    put( "measure", (null != measure) ? measure : "metric" );
                    put( "view", (null != view) ? view : "grid" );
            }
        };
        _parameters.putAll( fieldParameters );

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Summarize the recipe in a short text.
     * @param    id    Required parameter: The id of the recipe that should be summarized.
     * @return    Returns the DynamicResponse response from the API call 
     */
    public DynamicResponse getSummarizeRecipe(
                final int id
    ) throws Throwable {
        APICallBackCatcher<DynamicResponse> callback = new APICallBackCatcher<DynamicResponse>();
        getSummarizeRecipeAsync(id, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Summarize the recipe in a short text.
     * @param    id    Required parameter: The id of the recipe that should be summarized.
     * @return    Returns the void response from the API call 
     */
    public void getSummarizeRecipeAsync(
                final int id,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/recipes/{id}/summary");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4775233349387411749L;
            {
                    put( "id", id );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4952609822374451641L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "X-Mashape-Key", Configuration.xMashapeKey );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Search packaged food products like frozen pizza and snickers bars.
     * @param    query    Required parameter: The search query.
     * @param    number    Optional parameter: The number of results to retrieve, defaults to 10.
     * @param    offset    Optional parameter: The number of results to skip, defaults to 0.
     * @param    queryParameters    Additional optional query parameters are supported by this endpoint
     * @return    Returns the DynamicResponse response from the API call 
     */
    public DynamicResponse searchGroceryProducts(
                final String query,
                final Integer number,
                final Integer offset,
                Map<String, Object> queryParameters
    ) throws Throwable {
        APICallBackCatcher<DynamicResponse> callback = new APICallBackCatcher<DynamicResponse>();
        searchGroceryProductsAsync(query, number, offset, queryParameters, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Search packaged food products like frozen pizza and snickers bars.
     * @param    query    Required parameter: The search query.
     * @param    number    Optional parameter: The number of results to retrieve, defaults to 10.
     * @param    offset    Optional parameter: The number of results to skip, defaults to 0.
     * @param    queryParameters    Additional optional query parameters are supported by this endpoint
     * @return    Returns the void response from the API call 
     */
    public void searchGroceryProductsAsync(
                final String query,
                final Integer number,
                final Integer offset,
                Map<String, Object> queryParameters,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/food/products/search");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4693343453600891564L;
            {
                    put( "query", query );
                    put( "number", (null != number) ? number : 10 );
                    put( "offset", (null != offset) ? offset : 0 );
            }});

        //append optional parameters to the query
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4678305143457992679L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "X-Mashape-Key", Configuration.xMashapeKey );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Answer a nutrition related natural language question.
     * @param    q    Required parameter: The nutrition-related question.
     * @return    Returns the DynamicResponse response from the API call 
     */
    public DynamicResponse getQuickAnswer(
                final String q
    ) throws Throwable {
        APICallBackCatcher<DynamicResponse> callback = new APICallBackCatcher<DynamicResponse>();
        getQuickAnswerAsync(q, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Answer a nutrition related natural language question.
     * @param    q    Required parameter: The nutrition-related question.
     * @return    Returns the void response from the API call 
     */
    public void getQuickAnswerAsync(
                final String q,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/recipes/quickAnswer");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4845756911689913679L;
            {
                    put( "q", q );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5161130738649963213L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "X-Mashape-Key", Configuration.xMashapeKey );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Get information about a recipe.
     * @param    id    Required parameter: The id of the recipe.
     * @return    Returns the DynamicResponse response from the API call 
     */
    public DynamicResponse getRecipeInformation(
                final int id
    ) throws Throwable {
        APICallBackCatcher<DynamicResponse> callback = new APICallBackCatcher<DynamicResponse>();
        getRecipeInformationAsync(id, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get information about a recipe.
     * @param    id    Required parameter: The id of the recipe.
     * @return    Returns the void response from the API call 
     */
    public void getRecipeInformationAsync(
                final int id,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/recipes/{id}/information");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5456175713001496940L;
            {
                    put( "id", id );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4751601839705940106L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "X-Mashape-Key", Configuration.xMashapeKey );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Extract an ingredient from plain text.
     * @param    ingredientList    Required parameter: The ingredient list of the recipe, one ingredient per line.
     * @param    servings    Required parameter: The number of servings that you can make from the ingredients.
     * @return    Returns the DynamicResponse response from the API call 
     */
    public DynamicResponse createParseIngredients(
                final String ingredientList,
                final int servings
    ) throws Throwable {
        APICallBackCatcher<DynamicResponse> callback = new APICallBackCatcher<DynamicResponse>();
        createParseIngredientsAsync(ingredientList, servings, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Extract an ingredient from plain text.
     * @param    ingredientList    Required parameter: The ingredient list of the recipe, one ingredient per line.
     * @param    servings    Required parameter: The number of servings that you can make from the ingredients.
     * @return    Returns the void response from the API call 
     */
    public void createParseIngredientsAsync(
                final String ingredientList,
                final int servings,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/recipes/parseIngredients");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5303206904958548762L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "X-Mashape-Key", Configuration.xMashapeKey );
            }
        };

        //load all fields for the outgoing API request
        Map<String, Object> _parameters = new HashMap<String, Object>() {
            private static final long serialVersionUID = 5444089367489598300L;
            {
                    put( "ingredientList", ingredientList );
                    put( "servings", servings );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Map ingredients to food products.
     * @param    ingredientList    Required parameter: A new line-separated list of ingredients.
     * @param    servings    Required parameter: The number of servings this recipe makes.
     * @return    Returns the DynamicResponse response from the API call 
     */
    public DynamicResponse createMapIngredients(
                final String ingredientList,
                final int servings
    ) throws Throwable {
        APICallBackCatcher<DynamicResponse> callback = new APICallBackCatcher<DynamicResponse>();
        createMapIngredientsAsync(ingredientList, servings, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Map ingredients to food products.
     * @param    ingredientList    Required parameter: A new line-separated list of ingredients.
     * @param    servings    Required parameter: The number of servings this recipe makes.
     * @return    Returns the void response from the API call 
     */
    public void createMapIngredientsAsync(
                final String ingredientList,
                final int servings,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/food/ingredients/map");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5108602595360402851L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "X-Mashape-Key", Configuration.xMashapeKey );
            }
        };

        //load all fields for the outgoing API request
        Map<String, Object> _parameters = new HashMap<String, Object>() {
            private static final long serialVersionUID = 5594389310970396521L;
            {
                    put( "ingredientList", ingredientList );
                    put( "servings", servings );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Extract recipe data from a recipe blog or Web page.
     * @param    url    Required parameter: The URL of the recipe page.
     * @param    forceExtraction    Optional parameter: If true, the extraction will be triggered no matter whether we know the recipe already. Use that only if information is missing as this operation is slower.
     * @param    queryParameters    Additional optional query parameters are supported by this endpoint
     * @return    Returns the DynamicResponse response from the API call 
     */
    public DynamicResponse getExtractRecipeFromWebsite(
                final String url,
                final Boolean forceExtraction,
                Map<String, Object> queryParameters
    ) throws Throwable {
        APICallBackCatcher<DynamicResponse> callback = new APICallBackCatcher<DynamicResponse>();
        getExtractRecipeFromWebsiteAsync(url, forceExtraction, queryParameters, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Extract recipe data from a recipe blog or Web page.
     * @param    url    Required parameter: The URL of the recipe page.
     * @param    forceExtraction    Optional parameter: If true, the extraction will be triggered no matter whether we know the recipe already. Use that only if information is missing as this operation is slower.
     * @param    queryParameters    Additional optional query parameters are supported by this endpoint
     * @return    Returns the void response from the API call 
     */
    public void getExtractRecipeFromWebsiteAsync(
                final String url,
                final Boolean forceExtraction,
                Map<String, Object> queryParameters,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/recipes/extract");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5396712658266647802L;
            {
                    put( "url", url );
                    put( "forceExtraction", (null != forceExtraction) ? forceExtraction : false );
            }});

        //append optional parameters to the query
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5062302742649154694L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "X-Mashape-Key", Configuration.xMashapeKey );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Compute a meal plan for a day.
     * @param    targetCalories    Required parameter: The target number of calories per day.
     * @param    timeFrame    Required parameter: For one day or a complete week, allowed values are "day" and "week".
     * @return    Returns the DynamicResponse response from the API call 
     */
    public DynamicResponse getComputeDailyMealPlan(
                final int targetCalories,
                final String timeFrame
    ) throws Throwable {
        APICallBackCatcher<DynamicResponse> callback = new APICallBackCatcher<DynamicResponse>();
        getComputeDailyMealPlanAsync(targetCalories, timeFrame, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Compute a meal plan for a day.
     * @param    targetCalories    Required parameter: The target number of calories per day.
     * @param    timeFrame    Required parameter: For one day or a complete week, allowed values are "day" and "week".
     * @return    Returns the void response from the API call 
     */
    public void getComputeDailyMealPlanAsync(
                final int targetCalories,
                final String timeFrame,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/recipes/mealplans/generate");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5391691079416684457L;
            {
                    put( "targetCalories", targetCalories );
                    put( "timeFrame", timeFrame );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5061438443432741388L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "X-Mashape-Key", Configuration.xMashapeKey );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Given a set of product jsons, get back classified products.
     * @param    productJsonArray    Required parameter: A JSON Array of products.
     * @return    Returns the DynamicResponse response from the API call 
     */
    public DynamicResponse createClassifyGroceryProductsBatch(
                final List<Productjsonarray> productJsonArray
    ) throws Throwable {
        APICallBackCatcher<DynamicResponse> callback = new APICallBackCatcher<DynamicResponse>();
        createClassifyGroceryProductsBatchAsync(productJsonArray, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Given a set of product jsons, get back classified products.
     * @param    productJsonArray    Required parameter: A JSON Array of products.
     * @return    Returns the void response from the API call 
     */
    public void createClassifyGroceryProductsBatchAsync(
                final List<Productjsonarray> productJsonArray,
                final APICallBack<DynamicResponse> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/food/products/classifyBatch");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5656008091126710924L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "X-Mashape-Key", Configuration.xMashapeKey );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(productJsonArray));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Classify the recipe's cuisine.
     * @param    ingredientList    Required parameter: The ingredient list of the recipe, one ingredient per line.
     * @param    title    Required parameter: The title of the recipe.
     * @return    Returns the DynamicResponse response from the API call 
     */
    public DynamicResponse createClassifyCuisine(
                final String ingredientList,
                final String title
    ) throws Throwable {
        APICallBackCatcher<DynamicResponse> callback = new APICallBackCatcher<DynamicResponse>();
        createClassifyCuisineAsync(ingredientList, title, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Classify the recipe's cuisine.
     * @param    ingredientList    Required parameter: The ingredient list of the recipe, one ingredient per line.
     * @param    title    Required parameter: The title of the recipe.
     * @return    Returns the void response from the API call 
     */
    public void createClassifyCuisineAsync(
                final String ingredientList,
                final String title,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/recipes/cuisine");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4760209268998116193L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "X-Mashape-Key", Configuration.xMashapeKey );
            }
        };

        //load all fields for the outgoing API request
        Map<String, Object> _parameters = new HashMap<String, Object>() {
            private static final long serialVersionUID = 4997249860095149266L;
            {
                    put( "ingredientList", ingredientList );
                    put( "title", title );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Given a grocery product title, this endpoint allows you to detect what basic ingredient it is.
     * @param    productJson    Required parameter: The json representation of a product.
     * @return    Returns the Classifiedproduct response from the API call 
     */
    public Classifiedproduct createClassifyAGroceryProduct(
                final Productjson productJson
    ) throws Throwable {
        APICallBackCatcher<Classifiedproduct> callback = new APICallBackCatcher<Classifiedproduct>();
        createClassifyAGroceryProductAsync(productJson, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Given a grocery product title, this endpoint allows you to detect what basic ingredient it is.
     * @param    productJson    Required parameter: The json representation of a product.
     * @return    Returns the void response from the API call 
     */
    public void createClassifyAGroceryProductAsync(
                final Productjson productJson,
                final APICallBack<Classifiedproduct> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/food/products/classify");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5117307617315032074L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "X-Mashape-Key", Configuration.xMashapeKey );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(productJson));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            Classifiedproduct _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<Classifiedproduct>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Search recipes in natural language.
     * @param    query    Required parameter: The (natural language) recipe search query.
     * @param    cuisine    Optional parameter: The cuisine(s) of the recipes. One or more (comma separated) of the following: african, chinese, japanese, korean, vietnamese, thai, indian, british, irish, french, italian, mexican, spanish, middle eastern, jewish, american, cajun, southern, greek, german, nordic, eastern european, caribbean, or latin american.
     * @param    diet    Optional parameter: The diet to which the recipes must be compliant. Possible values are: pescetarian, lacto vegetarian, ovo vegetarian, vegan, and vegetarian.
     * @param    excludeIngredients    Optional parameter: An comma-separated list of ingredients or ingredient types that must not be contained in the recipes.
     * @param    intolerances    Optional parameter: A comma-separated list of intolerances. All found recipes must not have ingredients that could cause problems for people with one of the given tolerances. Possible values are: dairy, egg, gluten, peanut, sesame, seafood, shellfish, soy, sulfite, tree nut, and wheat.
     * @param    limitLicense    Optional parameter: Whether the recipes should have an open license that allows for displaying with proper attribution.
     * @param    number    Optional parameter: The number of results to return (between 0 and 100).
     * @param    offset    Optional parameter: The number of results to skip (between 0 and 900).
     * @param    type    Optional parameter: The type of the recipes. One of the following: main course, side dish, dessert, appetizer, salad, bread, breakfast, soup, beverage, sauce, or drink.
     * @param    queryParameters    Additional optional query parameters are supported by this endpoint
     * @return    Returns the DynamicResponse response from the API call 
     */
    public DynamicResponse searchRecipes(
                final String query,
                final String cuisine,
                final String diet,
                final String excludeIngredients,
                final String intolerances,
                final Boolean limitLicense,
                final Integer number,
                final Integer offset,
                final String type,
                Map<String, Object> queryParameters
    ) throws Throwable {
        APICallBackCatcher<DynamicResponse> callback = new APICallBackCatcher<DynamicResponse>();
        searchRecipesAsync(query, cuisine, diet, excludeIngredients, intolerances, limitLicense, number, offset, type, queryParameters, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Search recipes in natural language.
     * @param    query    Required parameter: The (natural language) recipe search query.
     * @param    cuisine    Optional parameter: The cuisine(s) of the recipes. One or more (comma separated) of the following: african, chinese, japanese, korean, vietnamese, thai, indian, british, irish, french, italian, mexican, spanish, middle eastern, jewish, american, cajun, southern, greek, german, nordic, eastern european, caribbean, or latin american.
     * @param    diet    Optional parameter: The diet to which the recipes must be compliant. Possible values are: pescetarian, lacto vegetarian, ovo vegetarian, vegan, and vegetarian.
     * @param    excludeIngredients    Optional parameter: An comma-separated list of ingredients or ingredient types that must not be contained in the recipes.
     * @param    intolerances    Optional parameter: A comma-separated list of intolerances. All found recipes must not have ingredients that could cause problems for people with one of the given tolerances. Possible values are: dairy, egg, gluten, peanut, sesame, seafood, shellfish, soy, sulfite, tree nut, and wheat.
     * @param    limitLicense    Optional parameter: Whether the recipes should have an open license that allows for displaying with proper attribution.
     * @param    number    Optional parameter: The number of results to return (between 0 and 100).
     * @param    offset    Optional parameter: The number of results to skip (between 0 and 900).
     * @param    type    Optional parameter: The type of the recipes. One of the following: main course, side dish, dessert, appetizer, salad, bread, breakfast, soup, beverage, sauce, or drink.
     * @param    queryParameters    Additional optional query parameters are supported by this endpoint
     * @return    Returns the void response from the API call 
     */
    public void searchRecipesAsync(
                final String query,
                final String cuisine,
                final String diet,
                final String excludeIngredients,
                final String intolerances,
                final Boolean limitLicense,
                final Integer number,
                final Integer offset,
                final String type,
                Map<String, Object> queryParameters,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/recipes/search");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5030911059150865138L;
            {
                    put( "query", query );
                    put( "cuisine", (null != cuisine) ? cuisine : "italian" );
                    put( "diet", (null != diet) ? diet : "vegetarian" );
                    put( "excludeIngredients", (null != excludeIngredients) ? excludeIngredients : "coconut" );
                    put( "intolerances", (null != intolerances) ? intolerances : "egg, gluten" );
                    put( "limitLicense", (null != limitLicense) ? limitLicense : false );
                    put( "number", (null != number) ? number : 10 );
                    put( "offset", (null != offset) ? offset : 0 );
                    put( "type", (null != type) ? type : "main course" );
            }});

        //append optional parameters to the query
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5070563768253598733L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "X-Mashape-Key", Configuration.xMashapeKey );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Find a set of recipes that adhere to the given nutrient limits. All the found recipes will have macro nutrients within the calories, protein, fat, and carbohydrate limits.
     * @param    maxcalories    Optional parameter: The maximum number of calories the recipe can have.
     * @param    maxcarbs    Optional parameter: The maximum number of carbohydrates in grams the recipe can have.
     * @param    maxfat    Optional parameter: The maximum number of fat in grams the recipe can have.
     * @param    maxprotein    Optional parameter: The maximum number of protein in grams the recipe can have.
     * @param    mincalories    Optional parameter: The minimum number of calories the recipe must have.
     * @param    minCarbs    Optional parameter: The minimum number of carbohydrates in grams the recipe must have.
     * @param    minfat    Optional parameter: The minimum number of fat in grams the recipe must have.
     * @param    minProtein    Optional parameter: The minimum number of protein in grams the recipe must have.
     * @param    queryParameters    Additional optional query parameters are supported by this endpoint
     * @return    Returns the DynamicResponse response from the API call 
     */
    public DynamicResponse findByNutrients(
                final Integer maxcalories,
                final Integer maxcarbs,
                final Integer maxfat,
                final Integer maxprotein,
                final Integer mincalories,
                final Integer minCarbs,
                final Integer minfat,
                final Integer minProtein,
                Map<String, Object> queryParameters
    ) throws Throwable {
        APICallBackCatcher<DynamicResponse> callback = new APICallBackCatcher<DynamicResponse>();
        findByNutrientsAsync(maxcalories, maxcarbs, maxfat, maxprotein, mincalories, minCarbs, minfat, minProtein, queryParameters, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Find a set of recipes that adhere to the given nutrient limits. All the found recipes will have macro nutrients within the calories, protein, fat, and carbohydrate limits.
     * @param    maxcalories    Optional parameter: The maximum number of calories the recipe can have.
     * @param    maxcarbs    Optional parameter: The maximum number of carbohydrates in grams the recipe can have.
     * @param    maxfat    Optional parameter: The maximum number of fat in grams the recipe can have.
     * @param    maxprotein    Optional parameter: The maximum number of protein in grams the recipe can have.
     * @param    mincalories    Optional parameter: The minimum number of calories the recipe must have.
     * @param    minCarbs    Optional parameter: The minimum number of carbohydrates in grams the recipe must have.
     * @param    minfat    Optional parameter: The minimum number of fat in grams the recipe must have.
     * @param    minProtein    Optional parameter: The minimum number of protein in grams the recipe must have.
     * @param    queryParameters    Additional optional query parameters are supported by this endpoint
     * @return    Returns the void response from the API call 
     */
    public void findByNutrientsAsync(
                final Integer maxcalories,
                final Integer maxcarbs,
                final Integer maxfat,
                final Integer maxprotein,
                final Integer mincalories,
                final Integer minCarbs,
                final Integer minfat,
                final Integer minProtein,
                Map<String, Object> queryParameters,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/recipes/findByNutrients");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5031650605869070192L;
            {
                    put( "maxcalories", (null != maxcalories) ? maxcalories : 1500 );
                    put( "maxcarbs", (null != maxcarbs) ? maxcarbs : 100 );
                    put( "maxfat", (null != maxfat) ? maxfat : 100 );
                    put( "maxprotein", (null != maxprotein) ? maxprotein : 100 );
                    put( "mincalories", (null != mincalories) ? mincalories : 0 );
                    put( "minCarbs", (null != minCarbs) ? minCarbs : 0 );
                    put( "minfat", (null != minfat) ? minfat : 0 );
                    put( "minProtein", (null != minProtein) ? minProtein : 0 );
            }});

        //append optional parameters to the query
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4842291801277835721L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "X-Mashape-Key", Configuration.xMashapeKey );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Find recipes that use as many of the given ingredients as possible and have as little as possible missing ingredients. This is a whats in your fridge API endpoint.
     * @param    ingredients    Required parameter: A comma-separated list of ingredients that the recipes should contain.
     * @param    limitLicense    Optional parameter: Whether to only show recipes with an attribution license.
     * @param    number    Optional parameter: The maximal number of recipes to return (default = 5).
     * @param    ranking    Optional parameter: Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.
     * @param    queryParameters    Additional optional query parameters are supported by this endpoint
     * @return    Returns the List<FindByIngredientsModel> response from the API call 
     */
    public List<FindByIngredientsModel> findByIngredients(
                final String ingredients,
                final Boolean limitLicense,
                final Integer number,
                final Integer ranking,
                Map<String, Object> queryParameters
    ) throws Throwable {
        APICallBackCatcher<List<FindByIngredientsModel>> callback = new APICallBackCatcher<List<FindByIngredientsModel>>();
        findByIngredientsAsync(ingredients, limitLicense, number, ranking, queryParameters, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Find recipes that use as many of the given ingredients as possible and have as little as possible missing ingredients. This is a whats in your fridge API endpoint.
     * @param    ingredients    Required parameter: A comma-separated list of ingredients that the recipes should contain.
     * @param    limitLicense    Optional parameter: Whether to only show recipes with an attribution license.
     * @param    number    Optional parameter: The maximal number of recipes to return (default = 5).
     * @param    ranking    Optional parameter: Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.
     * @param    queryParameters    Additional optional query parameters are supported by this endpoint
     * @return    Returns the void response from the API call 
     */
    public void findByIngredientsAsync(
                final String ingredients,
                final Boolean limitLicense,
                final Integer number,
                final Integer ranking,
                Map<String, Object> queryParameters,
                final APICallBack<List<FindByIngredientsModel>> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/recipes/findByIngredients");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5557020960760534928L;
            {
                    put( "ingredients", ingredients );
                    put( "limitLicense", (null != limitLicense) ? limitLicense : false );
                    put( "number", (null != number) ? number : 5 );
                    put( "ranking", (null != ranking) ? ranking : 1 );
            }});

        //append optional parameters to the query
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4899735225710453753L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "X-Mashape-Key", Configuration.xMashapeKey );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            List<FindByIngredientsModel> _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<List<FindByIngredientsModel>>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Create a recipe card given a recipe.
     * @param    backgroundImage    Required parameter: The background image ("none","background1", or "background2").
     * @param    image    Required parameter: The binary image of the recipe as jpg.
     * @param    ingredients    Required parameter: The ingredient list of the recipe, one ingredient per line.
     * @param    instructions    Required parameter: The instructions to make the recipe. One step per line.
     * @param    mask    Required parameter: The mask to put over the recipe image ("ellipseMask", "diamondMask", "diamondMask", "starMask", "heartMask", "potMask", "fishMask").
     * @param    readyInMinutes    Required parameter: The number of minutes it takes to get the recipe on the table.
     * @param    servings    Required parameter: The number of servings that you can make from the ingredients.
     * @param    title    Required parameter: The title of the recipe.
     * @param    author    Optional parameter: The author of the recipe.
     * @param    backgroundColor    Optional parameter: The background color on the recipe card as a hex-string.
     * @param    fontColor    Optional parameter: The font color on the recipe card as a hex-string.
     * @param    source    Optional parameter: The source of the recipe.
     * @param    fieldParameters    Additional optional form parameters are supported by this endpoint
     * @return    Returns the DynamicResponse response from the API call 
     */
    public DynamicResponse createRecipeCard(
                final String backgroundImage,
                final InputStream image,
                final String ingredients,
                final String instructions,
                final String mask,
                final int readyInMinutes,
                final int servings,
                final String title,
                final String author,
                final String backgroundColor,
                final String fontColor,
                final String source,
                Map<String, Object> fieldParameters
    ) throws Throwable {
        APICallBackCatcher<DynamicResponse> callback = new APICallBackCatcher<DynamicResponse>();
        createRecipeCardAsync(backgroundImage, image, ingredients, instructions, mask, readyInMinutes, servings, title, author, backgroundColor, fontColor, source, fieldParameters, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Create a recipe card given a recipe.
     * @param    backgroundImage    Required parameter: The background image ("none","background1", or "background2").
     * @param    image    Required parameter: The binary image of the recipe as jpg.
     * @param    ingredients    Required parameter: The ingredient list of the recipe, one ingredient per line.
     * @param    instructions    Required parameter: The instructions to make the recipe. One step per line.
     * @param    mask    Required parameter: The mask to put over the recipe image ("ellipseMask", "diamondMask", "diamondMask", "starMask", "heartMask", "potMask", "fishMask").
     * @param    readyInMinutes    Required parameter: The number of minutes it takes to get the recipe on the table.
     * @param    servings    Required parameter: The number of servings that you can make from the ingredients.
     * @param    title    Required parameter: The title of the recipe.
     * @param    author    Optional parameter: The author of the recipe.
     * @param    backgroundColor    Optional parameter: The background color on the recipe card as a hex-string.
     * @param    fontColor    Optional parameter: The font color on the recipe card as a hex-string.
     * @param    source    Optional parameter: The source of the recipe.
     * @param    fieldParameters    Additional optional form parameters are supported by this endpoint
     * @return    Returns the void response from the API call 
     */
    public void createRecipeCardAsync(
                final String backgroundImage,
                final InputStream image,
                final String ingredients,
                final String instructions,
                final String mask,
                final int readyInMinutes,
                final int servings,
                final String title,
                final String author,
                final String backgroundColor,
                final String fontColor,
                final String source,
                Map<String, Object> fieldParameters,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/recipes/visualizeRecipe");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5557542687423836561L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "X-Mashape-Key", Configuration.xMashapeKey );
            }
        };

        //load all fields for the outgoing API request
        Map<String, Object> _parameters = new HashMap<String, Object>() {
            private static final long serialVersionUID = 4676120134700612569L;
            {
                    put( "backgroundImage", backgroundImage );
                    put( "image", image );
                    put( "ingredients", ingredients );
                    put( "instructions", instructions );
                    put( "mask", mask );
                    put( "readyInMinutes", readyInMinutes );
                    put( "servings", servings );
                    put( "title", title );
                    put( "author", (null != author) ? author : "Emily Henderson" );
                    put( "backgroundColor", (null != backgroundColor) ? backgroundColor : "#ffffff" );
                    put( "fontColor", (null != fontColor) ? fontColor : "#333333" );
                    put( "source", (null != source) ? source : "spoonacular.com" );
            }
        };
        _parameters.putAll( fieldParameters );

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}